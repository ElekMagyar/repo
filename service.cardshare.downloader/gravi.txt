('1 Music Channel', 'MUSICCHANNEL', 'ROM'),('4 Story TV', 'STORY4', 'HUN'),('AMC Eastern Europe', 'AMC', 'HUN'),('AXN', 'AXN', 'HUN'),('AXN Black', 'AXNBLACK', 'HUN'),('AXN Black SVK', 'AXNBLACK', 'HUN'),('AXN White', 'AXNWHITE', 'HUN'),('AXN White SVK', 'AXNWHITE', 'HUN'),('Animal Planet Eastern Europe', 'ANIMAL', 'HUN'),('Boomerang', 'BOOMERANG', 'HUN'),('C8   Nights', 'MINIMAX_C8', 'HUN'),('CBS Reality', 'CBSREALITY', 'HUN'),('Cartoon Network Eastern Europe', 'CARTOON', 'HUN'),('Cinemax', 'CINEMAX', 'HUN'),('Cinemax 2 Europe', 'CINEMAX2', 'HUN'),('Comedy Central', 'COMEDY', 'HUN'),('Cool TV', 'COOL', 'HUN'),('Da Vinci Learning', 'DAVINCI', 'HUN'),('DIGI Sport 3', 'DIGISPORT3', 'ROM'),('Digi World', 'DIGIWORLD', 'ROM'),('Discovery Channel', 'DISCOVERY', 'HUN'),('Discovery Science', 'DISCOVERYSCI', 'HUN'),('Disney Channel E', 'DISNEY', 'HUN'),('Disney Junior', 'DISNEY_JUNIOR', 'HUN'),('DoQ TV', 'DOQ', 'HUN'),('Duna TV', 'DUNA', 'HUN'),('Duna World', 'DUNAWORLD', 'HUN'),('Echo TV', 'ECHOTV', 'HUN'),('Eurosport 1', 'EUROSPORT', 'HUN'),('Eurosport 2', 'EUROSPORT2', 'HUN'),('Extreme Sports', 'EXTREMESP', 'HUN'),('Film +', 'FILMPLUS', 'HUN'),('Film Café', 'FILMCAFE', 'HUN'),('Film Mánia', 'FILMMANIA', 'HUN'),('FilmBox', 'FILMBOX', 'HUN'),('Filmbox Family', 'FILMBOXFAMILY', 'HUN'),('Filmbox Plus', 'FILMBOXPLUS', 'HUN'),('Filmbox Premium', 'FILMBOX_PREMIUM', 'HUN'),('Fine Living Network', 'FINELIVING', 'HUN'),('Fishing & Hunting', 'FISHING_HUNTING', 'HUN'),('Food Network', 'FOODNETWORK', 'HUN'),('Galaxy', 'GALAXY', 'HUN'),('HBO 2 Central Europe', 'HBO2', 'HUN'),('HBO 3 Central Europe', 'HBO3', 'HUN'),('HBO 3 Romania', 'HBO3', 'HUN'),('HBO EU', 'HBOHD', 'HUN'),('HBO Hungary', 'HBOHD', 'HUN'),('Hir TV', 'HIRTV', 'HUN'),('History Channel EE', 'HISTORYHD', 'HUN'),('Hit Music', 'HIT_MUSIC', 'ROM'),('Investigation Discovery Xtra', 'ID_EXTRA', 'HUN'),('JimJam EMEA', 'JIMJAM', 'HUN'),('M1 - Magyar TV', 'M1', 'HUN'),('M3', 'M3', 'HUN'),('M4 Sport', 'M4_SPORT', 'HUN'),('MTV Dance', 'MTVDANCE', 'ENG'),('MTV Europe', 'MTVHU', 'HUN'),('MTV Hits', 'MTVHITS', 'ENG'),('MTV Rocks', 'MTVROCKS', 'ENG'),('Magyar ATV', 'ATV', 'HUN'),('Magyar TV 2', 'M2', 'HUN'),('Megamax', 'MEGAMAX', 'HUN'),('Minimax Czechia', 'MINIMAX', 'HUN'),('Muzsika TV', 'MUZSIKATV', 'HUN'),('NatGeo Wild', 'NATGEOWILD', 'HUN'),('National Geographic Europe', 'NATGEO', 'HUN'),('Nick Jr Europe', 'NICKJR', 'HUN'),('Nick Jr Hungary', 'NICKJR', 'HUN'),('Nickelodeon Europe', 'NICKELODEON', 'HUN'),('Paramount Channel mania', 'PARAMOUNT', 'HUN'),('Prime', 'PRIME', 'HUN'),('RTL 2', 'RTL2', 'HUN'),('RTL Klub', 'RTL', 'HUN'),('RTL+', 'RTL_PLUSZ', 'HUN'),('Sorozat +', 'SOROZAT', 'HUN'),('Spektrum Home', 'SPEKTRUMHOME', 'HUN'),('Spektrum Int', 'SPEKTRUM', 'HUN'),('Spektrum TV', 'SPEKTRUM', 'HUN'),('Sport 1', 'SPORT1', 'HUN'),('Sport 2', 'SPORT2', 'HUN'),('Sport M', 'SPORTM', 'HUN'),('Story 5', 'STORY5', 'HUN'),('Super TV 2', 'SUPERTV2', 'HUN'),('TLC Europe', 'TLC', 'HUN'),('TV 2', 'TV2', 'HUN'),('TV Paprika', 'PAPRIKA', 'HUN'),('Travel Channel', 'TRAVEL', 'HUN'),('VH-1 Video Hits One', 'VH1', 'ENG'),('VH-1 Classic', 'VH1CLASSIC', 'ENG'),('Viasat 6', 'VIASAT6', 'HUN'),('Viasat History', 'VIASATHIST', 'HUN'),('Viva TV', 'VIVA', 'HUN'),('AXN Romania', 'AXN', 'HUN'),('AXN Central Europe', 'AXN', 'HUN'),('C8 Hungary  Nights', 'MINIMAX_C8', 'HUN'),('4! Story TV', 'STORY4', 'HUN'),('Chili', 'CHILI_TV', 'HUN'),('Comedy Central Hungary', 'COMEDY', 'HUN'),('DTX', 'DTX', 'HUN'),('Discovery Channel Hungary', 'DISCOVERY', 'HUN'),('Discovery Channel Romania', 'DISCOVERY', 'HUN'),('Disney Channel Hungary & Czechia', 'DISNEY', 'HUN'),('Disney Junior Romania', 'DISNEY_JUNIOR', 'HUN'),('Film 2+', 'FILMPLUS2', 'HUN'),('Filmbox Premium Hungary', 'FILMBOX_PREMIUM', 'HUN'),('Fox Hungary', 'FOX', 'HUN'),('HBO Czechia', 'HBO', 'HUN'),('History Channel Eastern Europe', 'HISTORYHD', 'HUN'),('Humor +', 'HUMOR_PLUSZ', 'HUN'),('M+', 'MOZI_PLUSZ', 'HUN'),('Magyar Slager TV', 'SLAGERTV', 'HUN'),('NatGeo Wild Hungary', 'NATGEOWILD', 'HUN'),('Paramount Channel Hungary & Romania', 'PARAMOUNT', 'HUN'),('RTL 2 Hungary', 'RTL2', 'HUN'),('Spektrum TV Hungary', 'SPEKTRUM', 'HUN'),('Sport 1 Hungary', 'SPORT1', 'HUN'),('Sport 2 Hungary', 'SPORT2', 'HUN'),('Viva TV Hungary', 'VIVA', 'HUN'),('m5', 'M5', 'HUN'),('Spiler TV', 'SPILER_TV', 'HUN')